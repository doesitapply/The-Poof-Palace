#!/usr/bin/env python3
"""
The Poof Palace - Real Content Generation Demo
=============================================
This script demonstrates The Poof Palace generating real content with Gemini API.
No mocks - just pure AI creativity!
"""

import sys
import os
from datetime import datetime

# Add current directory to path
sys.path.insert(0, os.getcwd())

def generate_poof_palace_content():
    """Generate a complete piece of content for The Poof Palace."""
    print("🏰 The Poof Palace - Real Content Generation Demo 🏰")
    print("=" * 60)
    print("🎭 Generating real content with Gemini AI...")
    print("=" * 60)
    
    try:
        import google.generativeai as genai
        from modules.secure_config import load_secure_config
        
        # Load configuration
        config = load_secure_config()
        genai.configure(api_key=config.get_secret('GEMINI_API_KEY'))
        model = genai.GenerativeModel('gemini-1.5-flash-latest')
        
        # Read Lil Poof's lore bible
        with open(config.get('LORE_BIBLE_PATH'), 'r') as f:
            lore_bible = f.read()
        
        print("📚 Loaded Lil Poof's Lore Bible")
        print("🤖 Initialized Gemini AI")
        
        # Step 1: Generate a creative idea
        print("\n💡 Step 1: Generating Creative Idea...")
        idea_prompt = """You are a creative director for The Poof Palace brand. 
        Give me a simple, one-sentence idea for an illustration of Lil Poof. 
        Focus on a classic cat behavior like napping, playing, being mischievous, or ruling her domain."""
        
        idea_response = model.generate_content(f"{lore_bible}\n\n{idea_prompt}")
        idea = idea_response.text.strip()
        print(f"✨ Generated Idea: {idea}")
        
        # Step 2: Generate a royal caption
        print("\n👑 Step 2: Generating Royal Caption...")
        caption_prompt = f"""You are Lil Poof, the cat queen of The Poof Palace. 
        Write a witty, regal caption from your perspective for an image depicting: '{idea}'. 
        Include 3-5 relevant hashtags. Be dramatic, royal, and slightly sassy."""
        
        caption_response = model.generate_content(f"{lore_bible}\n\n{caption_prompt}")
        caption = caption_response.text.strip()
        print(f"📝 Generated Caption:\n{caption}")
        
        # Step 3: Generate Twitter version
        print("\n🐦 Step 3: Adapting for Twitter...")
        twitter_prompt = f"""Create a Twitter version of this Instagram caption (under 280 characters, keep the royal personality): 
        '{caption}'"""
        
        twitter_response = model.generate_content(f"{lore_bible}\n\n{twitter_prompt}")
        twitter_caption = twitter_response.text.strip()
        
        # Ensure it's under 280 characters
        if len(twitter_caption) > 280:
            twitter_caption = twitter_caption[:277] + "..."
        
        print(f"🐦 Twitter Caption ({len(twitter_caption)} chars):\n{twitter_caption}")
        
        # Step 4: Generate alt text
        print("\n🔍 Step 4: Generating Alt Text...")
        alt_text_prompt = f"""Write a descriptive alt text for an image of: '{idea}' in a whimsical storybook style. 
        Make it accessible and descriptive."""
        
        alt_text_response = model.generate_content(f"{lore_bible}\n\n{alt_text_prompt}")
        alt_text = alt_text_response.text.strip()
        print(f"🔍 Alt Text:\n{alt_text}")
        
        # Step 5: Generate a royal story
        print("\n📖 Step 5: Generating Royal Story...")
        story_prompt = f"""Write a short, whimsical story about Lil Poof based on this scenario: '{idea}'. 
        Include her royal personality, her throne (green cushion), and her arch-nemesis The Glimmering Red Dot."""
        
        story_response = model.generate_content(f"{lore_bible}\n\n{story_prompt}")
        story = story_response.text.strip()
        print(f"📖 Royal Story:\n{story}")
        
        # Save the complete content
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"output/logs/poof_palace_content_{timestamp}.txt"
        
        with open(output_file, 'w') as f:
            f.write("The Poof Palace - Real Content Generation\n")
            f.write("=" * 50 + "\n")
            f.write(f"Generated: {datetime.now()}\n")
            f.write("=" * 50 + "\n\n")
            f.write(f"IDEA:\n{idea}\n\n")
            f.write(f"INSTAGRAM CAPTION:\n{caption}\n\n")
            f.write(f"TWITTER CAPTION:\n{twitter_caption}\n\n")
            f.write(f"ALT TEXT:\n{alt_text}\n\n")
            f.write(f"ROYAL STORY:\n{story}\n\n")
            f.write("=" * 50 + "\n")
            f.write("Generated by The Poof Palace Autonomous Engine\n")
            f.write("Powered by Google Gemini AI\n")
        
        print(f"\n💾 Complete content saved to: {output_file}")
        
        # Summary
        print("\n" + "=" * 60)
        print("🎉 CONTENT GENERATION COMPLETE!")
        print("=" * 60)
        print("✅ Generated creative idea")
        print("✅ Created royal Instagram caption")
        print("✅ Adapted for Twitter")
        print("✅ Generated accessible alt text")
        print("✅ Wrote whimsical royal story")
        print("\n👑 Her Royal Floofiness is pleased with this content!")
        print("🐱 The Poof Palace content engine is working perfectly!")
        
        return True
        
    except Exception as e:
        print(f"❌ Content generation failed: {e}")
        return False

def main():
    """Run the content generation demo."""
    success = generate_poof_palace_content()
    
    if success:
        print("\n🚀 Ready for the next steps:")
        print("1. Set up Google Cloud for image generation")
        print("2. Update social media API tokens")
        print("3. Launch the full autonomous system")
    else:
        print("\n🔧 Please check your configuration and try again")

if __name__ == "__main__":
    main()
